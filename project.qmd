---
title: "BDA PROJECT"
author: Axel, Linnea, Elissa
format: 
  html:
    toc: true
    code-tools: true
    code-line-numbers: true  
    number-sections: true
    mainfont: Georgia, serif
    page-layout: article
  pdf:  
    geometry:
    - left=1cm,top=1cm,bottom=1cm,right=7cm
    number-sections: true
    code-annotations: none
editor: source
---

# Set up

## Loading the required packages

```{r}
library(ggplot2)
library(dplyr)
```

## Data

```{r}
library(survival)
data(transplant)
min(transplant$year)
max(transplant$year)
```

```{r}
ggplot(transplant, aes(x = futime)) + geom_histogram()
```

```{r}
transplant <- transplant %>%
                  filter(event != 'censored')

bins <- c(0, 100, 200, 300, 400, 500, Inf)

labels <- c('0-100', '101-200', '201-300', '301-400', '401-500', '>500')

transplant <- transplant %>%
  mutate(time_group = cut(futime, breaks = bins, labels = labels, include.lowest = TRUE, right = FALSE))
  
fractions <- transplant %>%
      group_by(year, abo) %>%
      summarise(sum(event == 'death'), .groups = 'drop')

colnames(fractions) <- c("days", "blood_type", "death")

fractions
```

```{r}
ggplot(fractions, aes(x = days, y = death, group = blood_type, color = blood_type)) + geom_line()
```

SCALE DATA??? SCALE BASED ON NUM BLOOD TYPE? 

# Model testing

## Model 1. Simple Bayesian regression on modelling events 'death' and 'ltx', i.e. receiving a liver transplant

```{r}
head(transplant)
transplant$id <- 1:nrow(transplant)
transplant_filtered <- transplant %>%
  filter(event %in% c("death", "ltx"))
```

On behalf of chatGPT:

```{r}
library(brms)

# Assuming your data frame is named 'transplant_data'
# 'Event' is your binary outcome variable (1 = event occurred, 0 = event did not occur)

formula <- bf(event ~ year + age + sex + abo + (1|id), family = bernoulli())

# Here, 'id' is a unique identifier for each person in your dataset.
# The random effect (1|id) accounts for the potential correlation between repeated measurements on the same person.

prior <- c(
  prior(normal(0, 10), class = Intercept),
  prior(normal(0, 10), class = b)
)

get_prior(
  formula,
  transplant_filtered,
  family = bernoulli()
)

# You can adjust the prior distributions based on your knowledge or assumptions about the data.

# Fit the model
model <- brm(formula, data = transplant_filtered, prior = prior, family = bernoulli(), chains = 4, iter = 2000)

```


```{r}
model
summary(model)
```

## 2. Model: Bayesian Regression with Multinomial Logistic Regression

```{r}
head(transplant)
transplant_filtered_2 <- transplant %>%
  filter(event != "censored")
```

```{r}
# Assuming your data frame is named 'transplant_data'
# 'Outcome' is your categorical outcome variable with 4 levels

formula_2 <- bf(event ~ year + age + sex + abo + (1|id), family = categorical())

prior_2 <- c(
  prior(normal(0, 10), class = Intercept, dpar = multx),
  prior(normal(0, 10), class = Intercept, dpar = muwithdraw),
  prior(normal(0, 10), class = b, dpar = multx),
  prior(normal(0, 10), class = b, dpar = muwithdraw)
)

get_prior(
  formula_2,
  transplant_filtered_2,
  family = categorical()
)
# You can adjust the prior distributions based on your knowledge or assumptions about the data.

# Fit the model
model_2 <- brm(formula_2, data = transplant_filtered_2, prior = prior_2, family = categorical(), chains = 4, iter = 2000)
```

```{r}
summary(model_2)
pp_check(model_2)

# ppc_bars
```
