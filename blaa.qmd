---
title: "BDA PROJECT"
author: Anonymous
format: 
  html:
    toc: true
    code-tools: true
    code-line-numbers: true  
    number-sections: true
    mainfont: Georgia, serif
    page-layout: article
  pdf:  
    geometry:
    - left=1cm,top=1cm,bottom=1cm,right=7cm
    number-sections: true
    code-annotations: none
editor: source
---

```{r}
install.packages("medicaldata")
library(remotes)
remotes::install_github("higgi13425/medicaldata")
```

```{r}
library(medicaldata)
library(dplyr)
cath <- medicaldata::cath

```

```{r}
#remove na

cath_clean <- na.omit(cath)

cath_clean
```

```{r}
#fit model

library(brms)

#priors
prior_sigdz <- c(
  prior(normal(0, 1), class = b),
  prior(normal(0, 1), class = Intercept)
)

prior_tvdlm <- c(
  prior(normal(0, 1), class = b),
  prior(normal(0, 1), class = Intercept)
)

# Create a formula for the model
formula_sigdz <- bf(sigdz ~ sex + age + cad_dur + choleste, family = bernoulli())
formula_tvdlm <- bf(tvdlm ~ sex + age + cad_dur + choleste, family = bernoulli())


# Fit the model for 'sigdz' with priors
model_sigdz <- brm(
  formula = formula_sigdz,
  data = cath_clean,
  family = bernoulli(),
  prior = prior_sigdz
)
saveRDS(model_sigdz, file = "model_sigdz.rds")



# Fit the model for 'tvdlm' with priors
model_tvdlm <- brm(
  formula = formula_tvdlm,
  data = cath_clean,
  family = bernoulli(),
  prior = prior_tvdlm
)
saveRDS(model_tvdlm, file = "model_tvdlm.rds")

# Display the model summary
summary(model_sigdz)
summary(model_tvdlm)
```

```{r}
newdata = cath_clean %>%
  select((c("sex", "age", "cad_dur", "choleste")))


posterior_preds_sigdz <- posterior_predict(model_sigdz, newdata = newdata)

posterior_preds_tvdlm <- posterior_predict(model_tvdlm, newdata = newdata)

```

```{r}
pp_check(model_sigdz)
```

```{r}
pp_check(model_tvdlm)
```

```{r}
cc <- cath_clean

cc

for (i in 2:4) {
      cc <- cc[which(cc[, i] != 0), ]
}

cc

for (i in 1:4) {
      cc[i] <- scale(cc[i])
}

cc


```

```{r}
library(corrplot)
corrplot(cor(cc[, c(6,1:5)]), type = "full", method = "number")

```

```{r}
library(rstanarm)

t_prior <- student_t(df = 3, location = 0, scale = 2.5)
post1 <- stan_glm(formula_sigdz, data = cc,
                 family = binomial(link = "logit"), 
                 prior = t_prior, prior_intercept = t_prior, QR=TRUE,
                 refresh=0)

post2 <- stan_glm(formula_tvdlm, data = cc,
                 family = binomial(link = "logit"), 
                 prior = t_prior, prior_intercept = t_prior, QR=TRUE,
                 refresh=0)
```

```{r}
library(ggplot2)
pplot<-plot(post1, "areas", prob = 0.95, prob_outer = 1)
pplot + geom_vline(xintercept = 0)

pplot2<-plot(post2, "areas", prob = 0.95, prob_outer = 1)
pplot2 + geom_vline(xintercept = 0)

```

```{r}
library(loo)

loo1 <- loo(post1, save_psis = TRUE)
loo2 <- loo(post2, save_psis = TRUE)

loo1
loo2

```

```{r}

baseline_model_1 <- update(post1, formula = sigdz ~ 1, QR = FALSE)
loo_baseline_1 <- loo(baseline_model_1)

baseline_model_2 <- update(post2, formula = tvdlm ~ 1, QR = FALSE)
loo_baseline_2 <- loo(baseline_model_2)
```

```{r}

loo_compare(loo1, loo_baseline_1)
```

```{r}
loo_compare(loo2, loo_baseline_2)
```

```{r}
library(rstanarm)
# Post1
cc$sigdz <- as.factor(cc$sigdz)
cc$tvdlm <- as.factor(cc$tvdlm)


## Input and target
x1 <- model.matrix(sigdz ~ . - 1, data=cc)
y1 <- cc$sigdz



## Predicted probabilities
linpred_1 <- posterior_linpred(post1)
preds_1 <- posterior_epred(post1)
pred_1 <- colMeans(preds_1)
pr_1 <- as.integer(pred_1 >= 0.5)
   
## posterior classification accuracy
round(mean(xor(pr_1,as.integer(y1==0))),2)
```

```{r}
# posterior balanced classification accuracy
round((mean(xor(pr_1[y1==0]>0.5,as.integer(y1[y1==0])))+mean(xor(pr_1[y1==1]<0.5,as.integer(y1[y1==1]))))/2,2)
```

```{r}
# LOO predictive probabilities
ploo1=E_loo(preds_1, loo1$psis_object, type="mean", log_ratios = -log_lik(post1))$value
# LOO classification accuracy
round(mean(xor(ploo1>0.5,as.integer(y1==0))),2)
```

```{r}

library(ggplot2)
# LOO balanced classification accuracy
round((mean(xor(ploo1[y1==0]>0.5,as.integer(y1[y1==0])))+mean(xor(ploo1[y1==1]<0.5,as.integer(y1[y1==1]))))/2,2)

# Plot
qplot(pred_1, ploo1)
```

```{r}

library(ggplot2)
# LOO balanced classification accuracy
round((mean(xor(ploo1[y1==0]>0.5,as.integer(y1[y1==0])))+mean(xor(ploo1[y1==1]<0.5,as.integer(y1[y1==1]))))/2,2)

# Plot
qplot(pred_1, ploo1)
```

```{r}
#calibration plot
library(caret)

calPlotData<-calibration(y1 ~ pred_1 + loopred, 
                         data = data.frame(pred_1=pred_1,loopred=ploo1,y1=y1), 
                         cuts=10, class="1")
ggplot(calPlotData, auto.key = list(columns = 2))+
  geom_jitter(data=data.frame(pred=pred_1,loopred=ploo1,y1=(as.numeric(y1)-1)*100), inherit.aes=FALSE,
              aes(x=loopred*100, y=y1), height=2, width=0, alpha=0.3) +
  scale_colour_brewer(palette = "Set1")+
  bayesplot::theme_default(base_family = "sans")

```
